// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId String @id @default(uuid())
  username  String @unique
  password  String

  user         User?
  refreshToken RefreshToken[]
}

model User {
  userId   String @id @default(uuid())
  username String @unique
  role     Role   @default(USER)

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  accountId String @unique

  testimonials Testimonials[]
  vehicle      Vehicle[]
  bookings     Bookings[]
}

model RefreshToken {
  tokenId      String   @id @default(uuid())
  refreshToken String?
  expiresAt    DateTime

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  accountId String
}

model Vehicle {
  vehicleId String   @id @default(uuid())
  name      String
  type      String
  status    String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  accountId String

  images Images[]
}

model Images {
  imageId String @id @default(uuid())
  name    String
  url     String
  type    String

  vehicle Vehicle @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)

  vehicleId String
}

model Testimonials {
  testimonialId String @id @default(uuid())
  content       String

  user User @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  accountId String
}

model Bookings {
  bookingId   String @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  phoneNumber String

  pickupDateTime String
  returnDateTime String
  duration       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  accountId String
}

enum Role {
  USER
  ADMIN
}
